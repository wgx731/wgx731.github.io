<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[wgx731's Technical Blog]]></title>
  <link href="http://wgx731.github.io/atom.xml" rel="self"/>
  <link href="http://wgx731.github.io/"/>
  <updated>2014-07-08T13:40:00+08:00</updated>
  <id>http://wgx731.github.io/</id>
  <author>
    <name><![CDATA[wgx731]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[NUS Orbital 2014] Mission Control #8 Tutorial Guide]]></title>
    <link href="http://wgx731.github.io/blog/2014/07/08/nus-orbital-2014-mission-control-number-8-tutorial-guide/"/>
    <updated>2014-07-08T09:14:00+08:00</updated>
    <id>http://wgx731.github.io/blog/2014/07/08/nus-orbital-2014-mission-control-number-8-tutorial-guide</id>
    <content type="html"><![CDATA[<p>This post is the guide for you to follow and complete the NUS orbital 2014 mission control #8 tutorial. Wish by after reading the post, you will know testing better and setup your own CI to see all your tests are passing. :P</p>

<!--more-->


<h2>Agenda</h2>

<ul>
<li><a href="https://github.com/wgx731/2014-nus-orbital-mission-control-8/releases/tag/step-0">Step 0 &ndash; What are we testing</a></li>
<li><a href="https://github.com/wgx731/2014-nus-orbital-mission-control-8/releases/tag/step-1">Step 1 &ndash; Doctest your model</a></li>
<li><a href="https://github.com/wgx731/2014-nus-orbital-mission-control-8/releases/tag/step-2">Step 2 &ndash; Unittest your helper method</a></li>
<li><a href="https://github.com/wgx731/2014-nus-orbital-mission-control-8/releases/tag/step-3">Step 3 &ndash; Test your handler</a></li>
<li><a href="https://github.com/wgx731/2014-nus-orbital-mission-control-8/releases/tag/step-4">Step 4 &ndash; Use behave to do browser test</a></li>
<li>Final words &ndash; CI</li>
</ul>


<h2>Step by Step Tutorial</h2>

<h5>NOTE: from <code>step-y</code> to <code>step-y-done</code> is one topic of testing, there will be practice and homework for each section. Remember to setup your <code>virtualenv</code> before continue. Below are some tips during the tutorial:</h5>

<ul>
<li>Use below command to go to correct step before reading the related section.</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -f step-y
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use below command to run test with <code>nose</code></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nosetests --with-doctest --with-gae --without-sandbox --gae-lib-root<span class="o">=</span><span class="s1">&#39;/path/to/google_appengine/&#39;</span> -v
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use below command to run test with <code>pytest</code></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>py.test --doctest-modules --with-gae --gae-path<span class="o">=</span><span class="s1">&#39;/path/to/google_appengine&#39;</span> -v
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Use below command to run test with <code>behave</code></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>behave -v
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Passing the test doesn&rsquo;t mean that you application doesn&rsquo;t have bugs, and it&rsquo;s not the case that the more test you have the better.</li>
</ul>


<h4>Step 0 (checkout to step-0)</h4>

<p>First of all, I have assumed that you have <a href="http://wgx731.github.io/blog/2014/07/06/orbital-m8-environment-setup/">setup your environment</a> correctly, and you are able to test it out at <code>step-x</code>. This is the easiest step, I have downloaded <a href="https://github.com/GoogleCloudPlatform/appengine-guestbook-python">the sample guestbook application</a>, please go to <code>guestbook</code> folder and try to start the application with your <code>google_appengine</code> and make sure it is running correctly. If you can sign on your guestbook at <a href="http://localhost:8080">http://localhost:8080/</a>, then you are ready to go to the next step.</p>

<p>No practice and homework for this step.</p>

<p><strong><a href="https://github.com/wgx731/2014-nus-orbital-mission-control-8/compare/step-x...step-0">Code Diff</a></strong></p>

<h4>Step 1 (checkout to <code>step-1</code>)</h4>

<p>The first thing we are going to test is your <code>model</code> for your google app engine project. In <code>guestbook</code>, there is only one <code>model</code> called <code>Greeting</code>. And we will be using python <code>doctest</code> to help us on this task. As a demo, I have already write the testing for creating <code>Greeting</code>. Here is an explanation for the core part of the testing code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">You</span> <span class="n">can</span> <span class="n">create</span> <span class="n">a</span> <span class="n">Greeting</span><span class="p">:</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">greeting</span> <span class="o">=</span> <span class="n">Greeting</span><span class="p">(</span><span class="n">parent</span><span class="o">=</span><span class="n">guestbook_key</span><span class="p">(),</span> <span class="n">content</span><span class="o">=</span><span class="s">&#39;test content&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">greeting</span>
</span><span class='line'><span class="n">Greeting</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">Key</span><span class="p">(</span><span class="s">&#39;Guestbook&#39;</span><span class="p">,</span> <span class="s">&#39;default_guestbook&#39;</span><span class="p">,</span> <span class="s">&#39;Greeting&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="n">content</span><span class="o">=</span><span class="s">&#39;test content&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">created_key</span> <span class="o">=</span> <span class="n">greeting</span><span class="o">.</span><span class="n">put</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">You</span> <span class="n">can</span> <span class="n">query</span> <span class="n">to</span> <span class="n">select</span> <span class="n">the</span> <span class="n">greeting</span><span class="p">:</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">greetings_query</span> <span class="o">=</span> <span class="n">Greeting</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">ancestor</span><span class="o">=</span><span class="n">guestbook_key</span><span class="p">())</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">greetings_query</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="c"># doctest: +ELLIPSIS</span>
</span><span class='line'><span class="p">[</span><span class="n">Greeting</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">Key</span><span class="p">(</span><span class="s">&#39;Guestbook&#39;</span><span class="p">,</span> <span class="s">&#39;default_guestbook&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this doctest, we have created a new <code>Greeting</code> object and put it into the datastore, and then verify the saving by query <code>Greeting</code> by key.</p>

<p>Now it&rsquo;s your turn to write some test. In the <em>TODO</em> part, I have asked you to write <code>doctest</code> for modification of <code>Greeting</code> object. Please try it out yourself before go to the answers.</p>

<p>Once you have finished writing your <code>doctest</code>, please run the test with either <code>nose</code> or <code>pytest</code> to verify the your answer.</p>

<h6>Homework: Apply doctest to your model in your project where you feel needed.</h6>

<p><strong><a href="https://github.com/wgx731/2014-nus-orbital-mission-control-8/compare/step-1...step-1-done">Code Diff</a></strong></p>

<h4>Step 2 (checkout to <code>step-2</code>)</h4>

<p>Sometimes, you may have some helper methods in your code, so let&rsquo;s use <code>unittest</code> this time to help us test helper methods. At <code>step-2</code>, I have refactored the code and add a <code>get_user_url</code> helper method. Please study the method and see the test example I have done for you. Here is an explanation for the core part:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># First, create an instance of the Testbed class.</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">testbed</span> <span class="o">=</span> <span class="n">testbed</span><span class="o">.</span><span class="n">Testbed</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># Then activate the testbed, which prepares the service stubs for use.</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">testbed</span><span class="o">.</span><span class="n">activate</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># Next, declare which service stubs you want to use.</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">testbed</span><span class="o">.</span><span class="n">init_user_stub</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># Set up expected values</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">user_login_url</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;url&#39;</span><span class="p">:</span> <span class="s">&#39;https://www.google.com/accounts/Login?continue=http%3A//testbed.example.com/&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;url_linktext&#39;</span><span class="p">:</span> <span class="s">&#39;Login&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">tearDown</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">testbed</span><span class="o">.</span><span class="n">deactivate</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">setCurrentUser</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">user_id</span><span class="p">,</span> <span class="n">is_admin</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'>    <span class="n">email_to_set</span> <span class="o">=</span> <span class="n">email</span> <span class="ow">or</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">id_to_set</span> <span class="o">=</span> <span class="n">user_id</span> <span class="ow">or</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">admin_to_set</span> <span class="o">=</span> <span class="s">&#39;1&#39;</span> <span class="k">if</span> <span class="n">is_admin</span> <span class="k">else</span> <span class="s">&#39;0&#39;</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">testbed</span><span class="o">.</span><span class="n">setup_env</span><span class="p">(</span><span class="n">USER_EMAIL</span><span class="o">=</span><span class="n">email_to_set</span><span class="p">,</span> <span class="n">overwrite</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">testbed</span><span class="o">.</span><span class="n">setup_env</span><span class="p">(</span><span class="n">USER_ID</span><span class="o">=</span><span class="n">id_to_set</span><span class="p">,</span> <span class="n">overwrite</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">testbed</span><span class="o">.</span><span class="n">setup_env</span><span class="p">(</span><span class="n">USER_IS_ADMIN</span><span class="o">=</span><span class="n">admin_to_set</span><span class="p">,</span> <span class="n">overwrite</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">testNoLoginUser</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">setCurrentUser</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">get_user_url</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">equal_to</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">user_login_url</span><span class="p">))</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="s">&#39;url_linktext&#39;</span><span class="p">],</span> <span class="n">is_not</span><span class="p">(</span><span class="s">&#39;Logout&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>setUp</code> method is run before the test to setup the <code>Testbed</code> stub and <code>tearDown</code> method is used to clean up after testing, <code>setCurrentUser</code> is a test helper method and at last <code>testNoLoginUser</code> is the actual test method. By the way, sorry for the java naming convention in python code. I was doing a java project at the same time. :(</p>

<p>Now it&rsquo;s your turn to write some test. In the <em>TODO</em> part, I have asked you to write <code>unittest</code> for testing with a login user. Please try it out yourself before go to the answers.</p>

<p>Once you have finished writing your <code>unittest</code>, please run the test with either <code>nose</code> or <code>pytest</code> to verify the your answer.</p>

<h6>Homework: Apply unittest to your helper method in your project where you feel needed.</h6>

<p><strong><a href="https://github.com/wgx731/2014-nus-orbital-mission-control-8/compare/step-2...step-2-done">Code Diff</a></strong></p>

<h4>Step 3 (checkout to <code>step-3</code>)</h4>

<p>Now you have finished your unit testing part, you are confident that you code is doing what it is designed to do. But wait, when things integrate together, it may cause other issues. That&rsquo;s why integration testing is needed. In the demo, I have write some code for the integration testing of <code>MainPage</code> handler. Here is the explanation of the core part:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">check_html</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response_body</span><span class="p">):</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">response_body</span><span class="p">,</span> <span class="n">contains_string</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">submit_button</span><span class="p">))</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">response_body</span><span class="p">,</span> <span class="n">contains_string</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">switch_button</span><span class="p">))</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">response_body</span><span class="p">,</span> <span class="n">contains_string</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">guest_name_label</span><span class="p">))</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">response_body</span><span class="p">,</span> <span class="n">contains_string</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">css_link</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test_main_page_no_login</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">set_current_user</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">testapp</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_int</span><span class="p">,</span> <span class="n">equal_to</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">status_ok</span><span class="p">))</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">content_type</span><span class="p">,</span> <span class="n">equal_to</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">html_content_type</span><span class="p">))</span>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">normal_body</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">check_html</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">contains_string</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">login_string</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test_main_page_with_login</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">set_current_user</span><span class="p">(</span><span class="s">&#39;test@test.com&#39;</span><span class="p">,</span> <span class="s">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">testapp</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status_int</span><span class="p">,</span> <span class="n">equal_to</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">status_ok</span><span class="p">))</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">content_type</span><span class="p">,</span> <span class="n">equal_to</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">html_content_type</span><span class="p">))</span>
</span><span class='line'>    <span class="n">body</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">normal_body</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">check_html</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">contains_string</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">logout_string</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test are quite straight forward, it just route to the correct path for the handler and verify if the html source returned is correct.</p>

<p>Now it&rsquo;s your turn to write some test. In the <em>TODO</em> part, I have asked you to test <code>Guestbook</code> handler. Please try it out yourself before go to the answers.</p>

<p>Once you have finished writing your integration testing for handler, please run the test with either <code>nose</code> or <code>pytest</code> to verify the your answer.</p>

<h6>Homework: Add integration test for handlers in your project.</h6>

<p><strong><a href="https://github.com/wgx731/2014-nus-orbital-mission-control-8/compare/step-3...step-3-done">Code Diff</a></strong></p>

<h4>Step-4 (checkout to <code>step-4</code>)</h4>

<p>You are almost there. Remember about acceptance testing. Now let&rsquo;s use <code>behave</code> and <code>selenium</code> to help us achieve the goal. Make sure you have a <code>Firefox</code> installed on your machine for the browser testing. You may wonder why we need browser testing as we have finished integration testing. As before, when you product is delivered to users, they will not use it as what you are testing with integration handler test. Browser testing add one more guarantee layer before you product meet the users. In the demo, I have help you to setup the <code>features</code> folder and <code>environment.py</code>, there is also a simple <code>Scenario</code> to test user sign on guestbook without login. Here is the explanation of the core part:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@given</span><span class="p">(</span><span class="s">&#39;user has been sign out&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">step_user_has_sign_out</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">HOME</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sign_out_link</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_link_text</span><span class="p">(</span><span class="s">&#39;Logout&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sign_out_link</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">NoSuchElementException</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@when</span><span class="p">(</span><span class="s">&#39;I go to &quot;{url}&quot;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">step_go_to</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@then</span><span class="p">(</span><span class="s">&#39;I should see main page html&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">step_see_main_page</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
</span><span class='line'>    <span class="n">guest_name_label</span> <span class="o">=</span> <span class="s">&#39;Guestbook name:&#39;</span>
</span><span class='line'>    <span class="n">page_source</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">page_source</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">page_source</span><span class="p">,</span> <span class="n">contains_string</span><span class="p">(</span><span class="n">guest_name_label</span><span class="p">))</span>
</span><span class='line'>    <span class="n">elm</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">&quot;submit&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">elm</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;Sign Guestbook&quot;</span>
</span><span class='line'>    <span class="n">elm</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">&quot;switch&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">elm</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;switch&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@when</span><span class="p">(</span><span class="s">&#39;I sign &quot;{content}&quot;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">setp_sign_content</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
</span><span class='line'>    <span class="n">elm</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_name</span><span class="p">(</span><span class="s">&quot;content&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">elm</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>    <span class="n">button</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s">&quot;submit&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">button</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@then</span><span class="p">(</span><span class="s">&#39;I should see &quot;{content}&quot; signed by &quot;{user}&quot;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">setp_see_content</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">user</span><span class="p">):</span>
</span><span class='line'>    <span class="n">page_source</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">page_source</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">page_source</span><span class="p">,</span> <span class="n">contains_string</span><span class="p">(</span><span class="s">&quot;&lt;blockquote&gt;</span><span class="si">%s</span><span class="s">&lt;/blockquote&gt;&quot;</span> <span class="o">%</span> <span class="n">content</span><span class="p">))</span>
</span><span class='line'>    <span class="n">assert_that</span><span class="p">(</span><span class="n">page_source</span><span class="p">,</span> <span class="n">contains_string</span><span class="p">(</span><span class="n">user</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the magic from <code>behave</code>, by using <code>@given</code>, <code>@when</code>, <code>@then</code> decorators, we are able to translate our <code>feature</code> document into real test code. Take a note with how <code>{}</code> is used for gather information from the <code>feature</code> document.</p>

<p>Now it&rsquo;s your turn to write some test. In the <em>TODO</em> part, I have asked you to test user sign on guestbook with login. Please try it out yourself before go to the answers.</p>

<p>Once you have finished writing your integration testing for handler, please run the test with <code>behave</code> to verify the your answer.</p>

<h6>Homework: Try to add browser testing in your project if you are interested, as it is a bit hard to setup the environment compared to previous unit testing and integration testing.</h6>

<p><strong><a href="https://github.com/wgx731/2014-nus-orbital-mission-control-8/compare/step-4...step-4-done">Code Diff</a></strong></p>

<h4>Final words &ndash; CI</h4>

<p>Now you have tested your project. Do you want to know how well your test is? Do you want to have a CI server to show off? :D</p>

<p>You can check out <a href="https://travis-ci.org/wgx731/2014-nus-orbital-mission-control-8">Travis CI</a> or <a href="https://drone.io/wgx731/2014-nus-orbital-mission-control-8-google-code">Drone CI</a> for this project.</p>

<p>To setup CI server for you project, you can refer to the documentation from <a href="http://docs.travis-ci.com/">Travis</a> and <a href="http://docs.drone.io/">Drone</a> for more details.</p>

<p>And you can also setup <a href="https://coveralls.io/">coveralls report</a> if you want. :)</p>

<p>That&rsquo;s all I have to share with you about python testing, wish you all are enjoying it.</p>

<h5>Please comment or send email to me if you have any trouble or if you feel there is any error in the tutorial guide.</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[NUS Orbital 2014] Mission Control #8 Environment Setup Guide]]></title>
    <link href="http://wgx731.github.io/blog/2014/07/06/orbital-m8-environment-setup/"/>
    <updated>2014-07-06T15:27:00+08:00</updated>
    <id>http://wgx731.github.io/blog/2014/07/06/orbital-m8-environment-setup</id>
    <content type="html"><![CDATA[<p>This post is the guide for you to setup your machine for the NUS orbital 2014 mission control #8 tutorial, it&rsquo;s better that you have finished your environment setup before coming to the mission control, because downloading the components may need quite some time and the network may not be very good during mission control session. Wish by after reading the post, you can setup your environment and be prepared for the tutorial. :D</p>

<!--more-->


<h2>Components Check List</h2>

<ul>
<li><a href="http://git-scm.com/">Git</a></li>
<li><a href="https://developers.google.com/appengine/downloads">GAE Python SDK</a></li>
<li><a href="https://virtualenv.pypa.io/en/latest/">python virtualenv</a></li>
<li><a href="https://github.com/wgx731/2014-nus-orbital-mission-control-8/blob/master/requirements.txt">3rd party libraries used in tutorial</a></li>
</ul>


<h2>Step by Step Guide Help</h2>

<h6>NOTE: to <em>windows</em> users, I will try to help you during the mission control if you have any trouble during the setup.</h6>

<h4>Git</h4>

<p>Actually this should not be listed in this help guide, because if you still don&rsquo;t know about <code>git</code> by now, I am very worried about what you will be delivering as your final application. :(</p>

<h4>GAE Python SDK</h4>

<p><span class='pullquote-right' data-pullquote='Remember to add your GAE python SDK location in your PATH environment.'>
This should be quite easy for you guys, as most of you are using <strong>GAE python SDK</strong> everyday during orbital. I will just leave a small tip here for <em>Linux</em> users.
Remember to add your GAE python SDK location in your PATH environment.
</span></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Put in your ~/.bashrc file</span>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$HOME/Development/google_appengine&quot;</span>:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<h4>python virtualenv</h4>

<p>As I have been living without <em>Windows</em> for quite a few years, so forgive me if it just doesn&rsquo;t work on the <em>Windows</em> machine. For <em>Linux</em> and <em>Mac</em> user, below is what you should do to install python virtualenv:</p>

<ul>
<li>Read the <a href="https://virtualenv.pypa.io/en/latest/virtualenv.html#installation">documentation on installation</a>, unless you want to mess up your global packages, please don&rsquo;t install virtualenv globally. Just download the latest source from <a href="https://pypi.python.org/packages/source/v/virtualenv/">PyPi</a>, extract to a folder where you usually put your development tools <code>~/Development/</code> for me.</li>
<li>Create an alias for your virtualenv.</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Put in your ~/.bashrc file</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">virtualenv</span><span class="o">=</span><span class="s1">&#39;path/to/virtualenv/virtualenv.py&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a new virtual python environment to test it and done.</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>virtualenv MYENV
</span></code></pre></td></tr></table></div></figure>


<p>For <em>Windows</em> users, I have found <a href="http://www.tylerbutler.com/2012/05/how-to-install-python-pip-and-virtualenv-on-windows-with-powershell/">this</a>, <a href="http://docs.python-guide.org/en/latest/starting/install/win/">this</a> and <a href="http://www.slideshare.net/sivasubramaniam3/installing-python-setup-tools-virtual-env-in-windows">this</a> for you as well. :)</p>

<h4>3rd party libraries</h4>

<p>This is the last step before the tutorial, here is what you need to do:</p>

<ul>
<li>Clone the tutorial repository</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/wgx731/2014-nus-orbital-mission-control-8.git
</span><span class='line'><span class="c"># OR</span>
</span><span class='line'>git clone git@github.com:wgx731/2014-nus-orbital-mission-control-8.git
</span><span class='line'><span class="nb">cd </span>2014-nus-orbital-mission-control-8
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Check out to <strong>step-x</strong> tag</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -f step-x
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create and use a new virtualenv called <strong>env</strong>, actually you can give it any name, it&rsquo;s just I have <a href="https://help.github.com/articles/ignoring-files">git ignored</a> the <code>env</code> folder in this repository</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>virtualenv env
</span><span class='line'><span class="nb">source </span>env/bin/activate
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install the requirements.</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pip install -r requirements.txt
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Test it out</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="s2">&quot;test-examples/&quot;</span>
</span><span class='line'><span class="c"># check pep8</span>
</span><span class='line'>flake8 ./ -v
</span><span class='line'><span class="c"># single doc test</span>
</span><span class='line'>python doctest_example.py -v
</span><span class='line'><span class="c"># single unit test</span>
</span><span class='line'>python test_unitest_example.py -v
</span><span class='line'><span class="c"># nose test framework</span>
</span><span class='line'>nosetests --with-doctest -v
</span><span class='line'><span class="c"># pytest test framework</span>
</span><span class='line'>py.test --doctest-module -v
</span><span class='line'><span class="nb">cd </span>behave-example/
</span><span class='line'><span class="c"># behave python BDD framework</span>
</span><span class='line'>behave -v
</span></code></pre></td></tr></table></div></figure>


<p>You should see all the tests passed. And congratulations, you have successfully setup your environment. :P</p>

<h5>Please comment or send email to me if you have any trouble or if you feel there is any error in the setup guide. Enjoy and start exploring if you want to.</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jackson &amp; export problem]]></title>
    <link href="http://wgx731.github.io/blog/2014/06/24/jackson-and-export-problem/"/>
    <updated>2014-06-24T21:10:00+08:00</updated>
    <id>http://wgx731.github.io/blog/2014/06/24/jackson-and-export-problem</id>
    <content type="html"><![CDATA[<p>I am working with <a href="http://www.playframework.com/">Play!</a> these days. So far I like the framework a lot, but I am not sure how is production performance for Play! yet. Anyway, this post is going to discuss about 2 issues I have encountered during my work.</p>

<!--more-->


<h1>The Jackson issue</h1>

<p>As the title suggested, the first problem is related to <a href="https://github.com/FasterXML/jackson">Jackson</a>, the default Json parsing library Play! is using. In my work, I am required to map some json to Java class, therefore I just create a standard Java class with the <em>Jackson</em> annotations. But it&rsquo;s interesting when I am writing the unit test, because the behavior of the <code>@JsonProperty</code> annotation is not as what I think. There is a <code>required</code> Boolean configuration in annotation, and here is the documentation for it:</p>

<blockquote><p>`public abstract boolean required`</p><p>Property that indicates whether a value (which may be explicit null) is expected for property during deserialization or not. If expected, BeanDeserialized should indicate this as a validity problem (usually by throwing an exception, but this may be sent via problem handlers that can try to rectify the problem, for example, by supplying a default value).</p><p>**Note that as of 2.0, this property is NOT used by BeanDeserializer: support is expected to be added for a later minor version.**</p><footer><strong>Jackson-JavaDoc</strong> <cite><a href='http://fasterxml.github.io/jackson-annotations/javadoc/2.2.0/'>fasterxml.github.io/javadoc/&hellip;</a></cite></footer></blockquote>


<p>It seems the <code>required</code> field has no effect at all. At least, when I try a json without a required field, Jackson will just assign a default value for the field. And here are some github issues that supporting what I am seeing.</p>

<ul>
<li><a href="https://github.com/FasterXML/jackson-databind/issues/230">Issue 230</a></li>
<li><a href="https://github.com/FasterXML/jackson-databind/issues/174">Issue 174</a></li>
</ul>


<p>So if anyone have a solution for this, please kindly send me. :D</p>

<h1>The export issue</h1>

<p>This issue happens when I am playing around with Play! configuration files. <a href="http://www.playframework.com/documentation/2.3.x/ProductionConfiguration">It&rsquo;s said that Play! configuration supports to get value from environment variables</a>, so the usual way for me to setup a so called &lsquo;environment variable&rsquo; is just put it in <code>~/.bashrc</code> file. Here is how I set Play! variable in my <code>~/.bashrc</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">ACTIVATOR</span><span class="o">=</span><span class="s2">&quot;$HOME/Development/activator&quot;</span>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$ACTIVATOR</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this approach doesn&rsquo;t work for Play! configuration, and after a few try-and-error attempts, I have figured out that I am missing the <code>export</code> function. So I was wondering what is the <code>export</code> function doing here. And this <a href="http://stackoverflow.com/questions/7411455/what-does-export-do-in-shell-programming">post</a> may give you more information about it. Basically, if you don&rsquo;t <code>export</code> the environment variable, the process created from your current shell may not have access to it even you current shell can access it.</p>

<p>That&rsquo;s all I have to share so far. Wish it helps for the ones who is facing same problem with me.</p>

<p><strong>It&rsquo;s been a long time since my last post. :P</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Dynamics Reflection]]></title>
    <link href="http://wgx731.github.io/blog/2013/10/01/team-dynamics-reflection/"/>
    <updated>2013-10-01T19:13:00+08:00</updated>
    <id>http://wgx731.github.io/blog/2013/10/01/team-dynamics-reflection</id>
    <content type="html"><![CDATA[<p>This is the post for CS3216 Team Dynamic lecture reflection questions.</p>

<!-- More -->


<ul>
<li>How much control and authority would you have given to this fourth voice in our choice of platforms (HTML5/native iOS)?</li>
</ul>


<p>I think based on the given situation, the best choice is to let the only coder inside the team decide, because in terms of how long it take to finish the product and how long it takes for the coder to pick up the required skills for HTML5 or iOS is only known ot the coder himself, therefore let him decide will be more reliable to know the actual time needed to finish the product. I think run experiment with 2 platforms is really a bad choice, it&rsquo;s a waste of resource as well as time, I think it&rsquo;s better to just spend at most 1 day to study the pros and cons of each platform,  link them with product needs, then the team must make the decision. At last, for the fourth voice, as he is not part of the team, it&rsquo;s better to take the voice as suggestion rather than &lsquo;decision&rsquo;.</p>

<ul>
<li>With the deadline just 2 weeks away, how would you, as project manager, resolved this problem if it were to occur within the team?</li>
</ul>


<p>As I have answered during lecture, first thing needs to be done is to identify the key features of the product, and drop all other features, so that the project is still a manageable functional prototype within the short time period. Then, finalize the schedule and scope of the project as there is no time to try and error during the development any more. At last, just make sure everyone put more effort into the project. But as a project manager, the best way is never push a 7 weeks&#8217; project into 2 weeks time period. :P</p>

<ul>
<li>What are some of the issues that we presented that could have happened to any team? List down 3, and talk about how you would have resolved these issues.</li>
</ul>


<p>1.Team communication issue, anything require teamwork may face this problem. And this is the biggest issue to team performance, any misunderstanding and miscommunication will result in conflicts and low efficiency. To overcome this, the team need to list role and task for each member in details so that everyone knows what they should finish and what others are doing.</p>

<p>2.Deadline issue, as CS3216 is not the only module for us, we can&rsquo;t spend our time all for CS3216 final project. But the deadline can&rsquo;t change, therefore we must plan well, for example, allocate some flexible time for expected events, like one member can&rsquo;t work because of computer is broken. Make sure no one is waiting and doing nothing because of dependency. The best solution is just make sure everyone finish their work on time.</p>

<p>3.Marketing issue, actually I think this is an issue just for this semester, because this year CS3216 have a lot of coders but not much business people. For example, our team is full of coders with no business experience. We may want to do a lot of features that in the end is just so &lsquo;fancy&rsquo; but no use if we don&rsquo;t do well in getting user feedback (which should be the business guy&rsquo;s job). For our team, as we built product for BigSpoon, I believe for the marketing part, we can rely on them (they already start to schedule meetings with our app users). With enough feedback and some guide from business guys in BigSpoon, I believe we can deliver a good product at the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flipboard - Digital DIY Magazines]]></title>
    <link href="http://wgx731.github.io/blog/2013/09/02/flipboard-digital-diy-magazines/"/>
    <updated>2013-09-02T23:56:00+08:00</updated>
    <id>http://wgx731.github.io/blog/2013/09/02/flipboard-digital-diy-magazines</id>
    <content type="html"><![CDATA[<p>This is the post for CS3216 Assignment 2 Application Critique on Flipboard.</p>

<!-- More -->


<p>Flipboard is one of the &lsquo;heavy content&rsquo; presentations among all teams, it&rsquo;s so full that not all points are mentioned during the presentation because of the strict 20 seconds per slide rule. Thanks to <a href="https://www.facebook.com/Fuzzie360">Fazli</a> for sharing the slides to me and there are 4 main area I would like to highlight for this presentation:</p>

<ul>
<li>Remarkable UX</li>
</ul>


<p><img src="http://wgx731.github.io/images/posts/flipboard-1.png" /></p>

<blockquote><p>Our mission is to let people discover and share content in beautiful, simple, and meaningful ways.</p><footer><strong>Flipboard</strong> <cite><a href='https://flipboard.com/about/'>About</a></cite></footer></blockquote>


<p>By focusing on creating &ldquo;virtual&rdquo; magazine, Flipboard is clearly one of the best in this area, like mentioned in the presentation, it&rsquo;s hard to differentiate virtual and real magazine in Flipboard. Besides that, the high quality advertisement in Flipboard makes it even better than real magazine. The flipping animation effect makes user feel like reading real magazines as well. I think Flipboard is really doing what their mission is about.</p>

<ul>
<li>Reading ecosystem</li>
</ul>


<p><img src="http://wgx731.github.io/images/posts/flipboard-2.png" /></p>

<p>I didn&rsquo;t know there is a &lsquo;Flip It&rsquo; plug-in from Flipboard previously, but this is awesome. And this is why Flipboard is called Digital DIY Magazine. As user is able to create, edit his own magazine and share it with the world, the content is not just selected by Flipboard team itself. This is a good sign, as every successful business has a ecosystem :P (Google Android ecosystem, Facebook ecosystem and so on).</p>

<ul>
<li>RSS Support</li>
</ul>


<p><img src="http://wgx731.github.io/images/posts/flipboard-3.png" /></p>

<p>I agree that RSS support is a good suggestion to Flipboard. I believe that Google shutdown Google Reader is just to let other &lsquo;creative&rsquo; RSS reader to come out. :D And I think the presentation didn&rsquo;t mention about Flipboard&rsquo;s competitors like <a href="http://corp.zinio.com/">zinio</a>, <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.magazines&amp;hl=en">Google magazine</a> and so on. If Flipboard can add RSS support, it may be an advantage for its business. And I will suggest Flipboard to add this support within &lsquo;Flip It&rsquo;, as user can create a RSS as his magazine instead of coming out with some new feature to do it.</p>

<ul>
<li>Social Integration</li>
</ul>


<p><img src="http://wgx731.github.io/images/posts/flipboard-4.png" /></p>

<p>Flipboard has social integration with major social platforms like Facebook and Twitter, it may be useful for other users but not for me, I think it&rsquo;s because I still view Flipboard as a reading tool instead of a platform now. Like our team mentioned for <a href="https://www.airtime.com/">AirTime</a>, it&rsquo;s really important for an application to find focus, in my opinion, become the best virtual magazine reading tool should be the focus for Flipboard.</p>

<p><strong>At last, I would like to refer to this &lsquo;TED&rsquo; video about interactive book:</strong></p>

<iframe src="http://embed.ted.com/talks/mike_matas.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>What if Flipboard is going to build the next generation interactive magazine? For example, video advertisement in virtual magazine and &lsquo;Harry Potter movie magazine&rsquo; effect like magazine. The future of Flipboard is very bright.</p>

<p><em>That&rsquo;s all I have and wish it leads you to think about it as well.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesson of Growth Hacking]]></title>
    <link href="http://wgx731.github.io/blog/2013/09/01/lesson-of-growth-hacking/"/>
    <updated>2013-09-01T23:52:00+08:00</updated>
    <id>http://wgx731.github.io/blog/2013/09/01/lesson-of-growth-hacking</id>
    <content type="html"><![CDATA[<p>I almost forget to blog about the lesson learned from BjornLee&rsquo;s Talk on Monday, here are some key points which I feel like to point out:</p>

<ol>
<li>Good marketing strategy &#8800; Cost a lot of money</li>
<li>5 Steps of Customer Life Cycle &ndash; Acquisition, Activation, Retention, Referral, Revenue. I think the presentation gives an awesome guide on Acquisition and Activation part.</li>
<li>Try fast, this is really something I need to practice, a lot of ideas just burst because I didn&rsquo;t try fast.</li>
<li><span class='pullquote-right' data-pullquote='Getting user feedback is an art.'> Getting user feedback is an art. I still remember about the part he mentioned about how he spent so much time on understanding housewife life so that he could get best user feedback. </span></li>
<li>A whole room of technical people listening to a &lsquo;biz&rsquo; guy talking about marketing is really fun.</li>
</ol>


<p>In summary, even through I am not going to be the one talking to customer in the future, it&rsquo;s still useful to know these tips. In the end, I will be the one building the product, if I don&rsquo;t know how to get feedback from my user, I can&rsquo;t imagine what will happen then. :P</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The "evil" side of Facebook]]></title>
    <link href="http://wgx731.github.io/blog/2013/09/01/the-evil-side-of-facebook/"/>
    <updated>2013-09-01T20:02:00+08:00</updated>
    <id>http://wgx731.github.io/blog/2013/09/01/the-evil-side-of-facebook</id>
    <content type="html"><![CDATA[<p>Assignment 1 of CS3216 is almost finished, we just submitted our Application Action for Facebook to review, and left with Collection only (which requires Action to be reviewed).</p>

<!--more-->


<p>During the last week, we have seen the &lsquo;evil&rsquo; side of Facebook :P, I will just put my findings below in case someone got into same &lsquo;trap&rsquo;:</p>

<ul>
<li>The Request</li>
</ul>


<blockquote><p>Requests are only available for games on Facebook.com or iOS and Android apps</p><footer><strong>Facebook Developer</strong> <cite><a href='https://developers.Facebook.com/docs/reference/dialogs/requests/'>Facebook Request Documentation</a></cite></footer></blockquote>


<blockquote><p>The primary purpose of your Canvas or Page Tab app on Facebook must not be to simply redirect users out of the Facebook experience and onto an external site.</p><footer><strong>Facebook Developer</strong> <cite><a href='https://developers.Facebook.com/policy/'>Facebook Policy</a></cite></footer></blockquote>


<p>These two lines has made it impossible to use request dialog to invite friends to a standalone Facebook application, initially we are trying to set up a redirect on Canvas page until we notice the Facebook Policy :( Luckily the assignment requirement has changed accordingly.</p>

<ul>
<li>The Like Button</li>
</ul>


<blockquote><p>Facebook did ninja changes. The add comment pop-up is only suppose to appear for normal layout. Invite Friends should not use window pop-up.</p><footer><strong>Master Nicholas Kwan</strong> <cite><a href='http://caballa.onfry.com/blog/'>caballa.onfry.com/blog/&hellip;</a></cite></footer></blockquote>


<p>Because of the changes, we need to do a lot of new fix on our website. :(</p>

<ul>
<li>The Scrape</li>
</ul>


<p>Just some points you need to be careful with:</p>

<ol>
<li>Facebook scrape will ignore changes in meta data from javascript, make sure you have different meta data for different URL without javascript.</li>
<li>Facebook like button <code>data-href</code> link should be the scraped link for your object.</li>
<li>Facebook only scrape every 24 hours, if you need to update, admin of the Facebook application need to force Facebook to update in <a href="https://developers.Facebook.com/tools/debug">Open Graph Debug Tool</a>.</li>
<li>All the object created by Facebook scrape can&rsquo;t be deleted, as so far we haven&rsquo;t found a way to delete the &lsquo;testing&rsquo; objects.</li>
<li>Facebook ignore URL with hash inside, there one may not be true, but due to our test it seems so.</li>
</ol>


<p>That&rsquo;s the reason why Nicholas and I stay away from Facebook API previously, and the experience in CS3216 Assignment 1 confirm our insight again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with HOOK]]></title>
    <link href="http://wgx731.github.io/blog/2013/08/18/playing-with-hook/"/>
    <updated>2013-08-18T18:34:00+08:00</updated>
    <id>http://wgx731.github.io/blog/2013/08/18/playing-with-hook</id>
    <content type="html"><![CDATA[<h2>What is git hook?</h2>

<p>According to git documentation:</p>

<blockquote><p>A feature that fire off custom scripts when certain important actions occur, including client side and server side.</p></blockquote>

<p>Learning from <a href="https://github.com/olenhad">master omer</a> on Saturday&rsquo;s workshop, we can use hook to do automated deployment, his approach is to create a separate <strong>bare</strong> repository in the hosting server and when push received trigger the script to do deployment. Whereas in my opinion, if you host your repository on <a href="https://github.com/">github</a> or <a href="https://bitbucket.org/">Bitbucket</a>, you can also use the POST hook service from them to do automatic deployment.</p>

<!--more-->


<p>If you are using Bitbucket, and here is the <a href="https://confluence.atlassian.com/display/BITBUCKET/POST+hook+management">documentation on Bitbucket POST hook</a>, it&rsquo;s quite useful. But I think it lacks of some example. We are using PHP to receive the POST data, it took us quite some time to figure out that the POST json data is actually in <code>$_POST['payload']</code>, which is not pointed out in the documentation.</p>

<p>Below is an skeleton file that you can use for your auto-deployment as well:</p>

<figure class='code'><figcaption><span>[deploy.php] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s2">&quot;payload&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$payload</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s2">&quot;payload&quot;</span><span class="p">],</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// only deploy for master branch</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$payload</span><span class="p">[</span><span class="s2">&quot;commits&quot;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s2">&quot;branch&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;master&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// only deploy when you see deploy command - store in $deployCommand</span>
</span><span class='line'>            <span class="nv">$deploy</span> <span class="o">=</span> <span class="nb">strpos</span><span class="p">(</span><span class="nv">$payload</span><span class="p">[</span><span class="s2">&quot;commits&quot;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s2">&quot;message&quot;</span><span class="p">],</span> <span class="nv">$deployCommand</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$deploy</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// finish what you need to do for deployment</span>
</span><span class='line'>                <span class="k">echo</span> <span class="s2">&quot;Deployed. :D </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Latest commit not from master branch, not deploying. </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span><span class="s2">&quot;Missing payload.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Sadly at last we need to switch back to Github with <em>no administrator access</em> for the repository, besides that we need to focus on the assignment itself, so I don&rsquo;t think we will continue on this auto-deployment tool as it&rsquo;s just a tool, anyway it&rsquo;s a good practice for us at least.</p>

<h5>Wish it helps you as well. Thank you very much.</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook App Type matters]]></title>
    <link href="http://wgx731.github.io/blog/2013/08/17/facebook-app-type-matters/"/>
    <updated>2013-08-17T01:37:00+08:00</updated>
    <id>http://wgx731.github.io/blog/2013/08/17/facebook-app-type-matters</id>
    <content type="html"><![CDATA[<blockquote><p>Only select Native/Desktop if you you have embedded your App Secret in your client app.  For all other cases you should choose Web.</p><footer><strong>Facebook Developer</strong></footer></blockquote>




<!--more-->


<p><em>Why I Bring this out?</em></p>

<p>Because of the wrong settings, I have spent 2 hours to debug a &lsquo;bug&rsquo; that Facebook PHP SDK <code>$facebook-&gt;getUser();</code> is always <code>return 0</code>, by the way, I think Facebook PHP SDK should give some useful feedback instead of just <code>return 0</code> in such case.</p>

<p><em>Lesson learnt</em></p>

<ol>
<li>Read the documentation carefully before start coding, especially when doing application for Facebook, the settings page has so many things to be filled up.</li>
<li>I need to find a way in PHP to do something like python <code>ipdb.set_trace()</code> so that I can step through the process and figure out what causes the error.</li>
<li>Have a rest if you mind is blowing up, take a step back to see the problem. >_&lt;</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django local_settings.py]]></title>
    <link href="http://wgx731.github.io/blog/2013/08/09/django-local-settings-dot-py/"/>
    <updated>2013-08-09T16:43:00+08:00</updated>
    <id>http://wgx731.github.io/blog/2013/08/09/django-local-settings-dot-py</id>
    <content type="html"><![CDATA[<p>During my internship at <a href="http://www.tripvillas.com">Tripvillas</a> plus the experience on <a href="http://hackdo.herokuapp.com">HackDo</a> project, I have noticed that it&rsquo;s important to have a good <code>local_settings.py</code> file to differentiate the production and development environment as well as hiding the confidential information for Django application.</p>

<!--more-->


<p>My approach is to have a <code>_local_settings.py</code> in your code base and write instructions on how you should modify the <code>_local_settings.py</code> to become your development <code>local_settings.py</code>, here is one example I used for <a href="http://hackdo.herokuapp.com">HackDo</a>:</p>

<div><script src='https://gist.github.com/6192166.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>There are other approaches like make <code>settings</code> a module and create <code>production.py</code>, <code>development.py</code> and so on, and then put all the confidential information in environment variables.</p>

<p>At last, I just want to comment that <strong>don&rsquo;t ever put confidential information in the code base</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I hope to learn in CS3216]]></title>
    <link href="http://wgx731.github.io/blog/2013/08/07/what-i-hope-to-learn-in-cs3216/"/>
    <updated>2013-08-07T23:08:00+08:00</updated>
    <id>http://wgx731.github.io/blog/2013/08/07/what-i-hope-to-learn-in-cs3216</id>
    <content type="html"><![CDATA[<p>To summarize, <strong>I would like to get my hands dirty</strong>.</p>

<p>Before I know CS3216, all the programming modules I have taken are not teaching by project. In my own opinion, I believe that to learn programming well, you must build something while learning the theory which support it. That&rsquo;s the main reason why I am here for CS3216 as it promises us with learning through coding in projects.</p>

<p>And it&rsquo;s also said that CS3216 is a good platform and community to meet good classmates and professors. I think this is where I will meet the guys from CS1101S and CS2020 path and catch up with them. I just can&rsquo;t wait to code and learn together with them.</p>

<p>At last, as we can choose the final project topic ourselves, it&rsquo;s really a good chance for us to make our ideas come to life. I wish at the end of the module, everyone (at least I) will feel satisfied after completing our own project.</p>

<blockquote><p>Let the <del>hacking</del> coding begin!</p><footer><strong>Mark Zuckerberg</strong> <cite>The Social Networks</cite></footer></blockquote>

]]></content>
  </entry>
  
</feed>
